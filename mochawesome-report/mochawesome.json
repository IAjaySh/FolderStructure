{
  "stats": {
    "suites": 3,
    "tests": 5,
    "passes": 4,
    "pending": 0,
    "failures": 1,
    "start": "2024-10-10T08:12:58.249Z",
    "end": "2024-10-10T08:12:58.291Z",
    "duration": 42,
    "testsRegistered": 5,
    "passPercent": 80,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "f3f95277-ee25-4122-925a-d1447f09e7cd",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "59cdc967-622b-46e2-929f-b19dd975e7a7",
          "title": "Folder Management API",
          "fullFile": "/Users/ajaysharma/Documents/workspace/coding question/fsModuleQuestions/FolderManagement/__tests__/test.js",
          "file": "/__tests__/test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Folder Management API\"",
              "fullTitle": "Folder Management API \"before all\" hook in \"Folder Management API\"",
              "timedOut": false,
              "duration": 10,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prisma.folderStructure.deleteMany({});\nawait prisma.folderStructure.create({\n    data: {\n        id: 1,\n        structure: []\n    }\n});",
              "err": {},
              "uuid": "2fa9c01c-00e8-46e5-85d3-6d989d59550b",
              "parentUUID": "59cdc967-622b-46e2-929f-b19dd975e7a7",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Folder Management API\"",
              "fullTitle": "Folder Management API \"before each\" hook in \"Folder Management API\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "prismaMock = sinon.stub(prisma.prototype);",
              "err": {},
              "uuid": "1fab70be-308f-422c-bd2e-b3b6d48c748f",
              "parentUUID": "59cdc967-622b-46e2-929f-b19dd975e7a7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Folder Management API\"",
              "fullTitle": "Folder Management API \"after each\" hook in \"Folder Management API\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "05c61d98-1e47-44ed-b9c8-615eaaec3647",
              "parentUUID": "59cdc967-622b-46e2-929f-b19dd975e7a7",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "6d49de75-7167-457f-b141-747cf585e5e3",
              "title": "GET /api/create",
              "fullFile": "/Users/ajaysharma/Documents/workspace/coding question/fsModuleQuestions/FolderManagement/__tests__/test.js",
              "file": "/__tests__/test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 400 if location is missing or invalid",
                  "fullTitle": "Folder Management API GET /api/create should return 400 if location is missing or invalid",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(app)\n    .get('/api/create')\n    .query({ id: 1 }) // Missing location query\n    .end((err, res) => {\n        expect(res).to.have.status(400);\n        expect(res.body).to.have.property('error', 'Invalid path provided.');\n        done();\n    });",
                  "err": {},
                  "uuid": "13322e38-53ab-4582-9ea4-c7a89179d320",
                  "parentUUID": "6d49de75-7167-457f-b141-747cf585e5e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should create file and return 201",
                  "fullTitle": "Folder Management API GET /api/create should create file and return 201",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// prismaMock.folderStructure.findUnique.resolves({ structure: [] });\n// prismaMock.folderStructure.update.resolves();\n// sinon.stub(fs, 'existsSync').returns(false);\n// sinon.stub(fs, 'writeFileSync');\nchai.request(app)\n    .get('/api/create')\n    .query({ id: 1, location: 'some/path/file.txt', fileContent: 'Hello, world!' })\n    .end((err, res) => {\n        expect(res).to.have.status(201);\n        expect(res.body).to.have.property('message', 'File or folder created successfully');\n        done();\n    });",
                  "err": {},
                  "uuid": "3967691a-a2ea-484c-8340-09589281e2db",
                  "parentUUID": "6d49de75-7167-457f-b141-747cf585e5e3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "13322e38-53ab-4582-9ea4-c7a89179d320",
                "3967691a-a2ea-484c-8340-09589281e2db"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 17,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "6a22f6a6-6242-42ae-84bd-f2b3cd1149ac",
              "title": "PUT /api/push",
              "fullFile": "/Users/ajaysharma/Documents/workspace/coding question/fsModuleQuestions/FolderManagement/__tests__/test.js",
              "file": "/__tests__/test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 400 if id or location is missing",
                  "fullTitle": "Folder Management API PUT /api/push should return 400 if id or location is missing",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(app)\n    .put('/api/push')\n    .query({ id: null, location: 'some/path' }) // Missing id\n    .end((err, res) => {\n        expect(res).to.have.status(400);\n        expect(res.body).to.have.property('error', 'Invalid id or location provided.');\n        done();\n    });",
                  "err": {},
                  "uuid": "eb7cc4e3-f91b-4d5b-b0a4-dcba7add025f",
                  "parentUUID": "6a22f6a6-6242-42ae-84bd-f2b3cd1149ac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if path does not exist",
                  "fullTitle": "Folder Management API PUT /api/push should return 404 if path does not exist",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(fs, 'existsSync').returns(false);\nchai.request(app)\n    .put('/api/push')\n    .query({ id: 1, location: 'nonexistent/path' })\n    .end((err, res) => {\n        expect(res).to.have.status(404);\n        expect(res.body).to.have.property('error', 'Specified path does not exist.');\n        done();\n    });",
                  "err": {},
                  "uuid": "e17ddc08-a26b-43b7-9d8e-766f674a94e3",
                  "parentUUID": "6a22f6a6-6242-42ae-84bd-f2b3cd1149ac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should create folders and files from the structure",
                  "fullTitle": "Folder Management API PUT /api/push should create folders and files from the structure",
                  "timedOut": false,
                  "duration": 5,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "await prisma.folderStructure.deleteMany({});\n            await prisma.folderStructure.create({\n                data: {\n                    id: 1,\n                    structure: [\n                        {\n                            \"name\": \"ap\",\n                            \"type\": \"folder\",\n                            \"childs\": [\n                                {\n                                    \"name\": \"notes\",\n                                    \"type\": \"folder\",\n                                    \"childs\": [\n                                        {\n                                            \"name\": \"javascript.txt\",\n                                            \"type\": \"file\",\n                                            \"content\": \"this is js notes file\"\n                                        }\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            });\n            chai.request(app)\n                .get('/api/create-structure')\n                .query({ id: 1 })\n                .end((err, res) => {\n                    expect(res).to.have.status(201);\n                    expect(res.body).to.have.property('message', 'Folders and files created successfully.');\n                    // Check if the folders and files were created correctly\n                    const thatisPath = __dirname + \"../\" + \"controllers\";\n                    console.log(\"that is path -> \", thatisPath);\n                    expect(fs.existsSync(path.join(thatisPath, 'drive', 'ap'))).to.be.true;\n                    expect(fs.existsSync(path.join(thatisPath, 'drive', 'ap', 'notes'))).to.be.true;\n                    expect(fs.existsSync(path.join(thatisPath, 'drive', 'ap', 'notes', 'ajay.js'))).to.be.true;\n                    expect(fs.readFileSync(path.join(thatisPath, 'drive', 'ap', 'notes', 'ajay.js'), 'utf-8')).to.equal('god:\"Ajay is my best creation\"');\n                    expect(fs.existsSync(path.join(thatisPath, 'drive', 'ap', 'notes', 'database.txt'))).to.be.true;\n                    expect(fs.readFileSync(path.join(thatisPath, 'drive', 'ap', 'notes', 'database.txt'), 'utf-8')).to.equal('this content is for database file');\n                    done();\n                });",
                  "err": {
                    "message": "AssertionError: expected false to be true",
                    "estack": "AssertionError: expected false to be true\n    at /Users/ajaysharma/Documents/workspace/coding question/fsModuleQuestions/FolderManagement/__tests__/test.js:144:86\n    at Request.callback (node_modules/superagent/lib/node/index.js:857:12)\n    at /Users/ajaysharma/Documents/workspace/coding question/fsModuleQuestions/FolderManagement/node_modules/superagent/lib/node/index.js:1070:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:21:7)\n    at IncomingMessage.emit (node:events:531:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                    "diff": "- false\n+ true\n"
                  },
                  "uuid": "0e8be613-de07-4ae1-b28f-a5d85b4562a4",
                  "parentUUID": "6a22f6a6-6242-42ae-84bd-f2b3cd1149ac",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eb7cc4e3-f91b-4d5b-b0a4-dcba7add025f",
                "e17ddc08-a26b-43b7-9d8e-766f674a94e3"
              ],
              "failures": [
                "0e8be613-de07-4ae1-b28f-a5d85b4562a4"
              ],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 60000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": null,
      "version": "5.2.0"
    }
  }
}